#include "nsISupports.idl"
#include "nsIRDFDataSource.idl"

[scriptable, uuid(46449e1d-69f3-4474-90a1-2aabaddf8447)]
interface fbIFacebookUser : nsISupports
{
    attribute AString id;
    attribute AString name;
    attribute AString pic;
    attribute AString status;
};

[scriptable, uuid(19baf81b-d1bd-4a99-9010-dd6f478bfd22)]
interface fbIFacebookService : nsISupports
{
    readonly attribute AString apiKey;
    readonly attribute AString secret;

    // login.xul is responsible for performing the login sequence.  Once that
    // is finished, it should call sessionStart, which initiates the polling
    // process.  If the session ever ends, the polling will stop until
    // sessionStart is called again.  Aside from the facebook.auth methods,
    // all other Facebook API calls should be done inside this service.
    void sessionStart(in AString sessionKey, in AString sessionSecret, in AString uid);
    void sessionEnd();

    // All other interaction comes by windows listing themselves as observers
    // and notifications that get triggered by the polling process.
    // Notifications that we fire:
    //   facebook-session-start
    //   facebook-session-end
    //   facebook-new-message
    //   facebook-new-poke
    //   facebook-new-friend
    //   facebook-new-status
    //   facebook-friends-updated
    // Windows can also query the most recent status of these things via the
    // readonly attributes below:
    readonly attribute boolean         loggedIn;
    readonly attribute fbIFacebookUser loggedInUser;
    readonly attribute long            numMsgs;
    readonly attribute long            numPokes;
    // two ways to access your friends: via an RDF data source or as an array of fbIFacebookUser structs
    // the array method is now kind of slow (O(n)) since we're not using it...if we start using it it can be optimized
    readonly attribute nsIRDFDataSource friendsRdf;
    void getFriends(out PRUint32 count, [retval,array,size_is(count)] out fbIFacebookUser users);
};
