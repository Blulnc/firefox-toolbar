/**
 * Facebook Firefox Toolbar Software License 
 * Copyright (c) 2006 Facebook, Inc. 
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (which, together with any graphical images included with such
 * software, are collectively referred to below as the "Software") to (a) use,
 * reproduce, display, distribute, execute, and transmit the Software, (b)
 * prepare derivative works of the Software (excluding any graphical images
 * included with the Software, which may not be modified or altered), and (c)
 * permit third-parties to whom the Software is furnished to do so, all
 * subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.  
 *
 * Facebook, Inc. retains ownership of the Software and all associated
 * intellectual property rights.  All rights not expressly granted in this
 * license are reserved by Facebook, Inc.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "nsISupports.idl"
#include "nsIRDFDataSource.idl"

[scriptable, uuid(46449e1d-69f3-4474-90a1-2aabaddf8447)]
interface fbIFacebookUser : nsISupports
{
    attribute AString id;
    attribute AString name;
    attribute AString pic;
    attribute AString status;
    attribute long    stime;
    attribute long    notes;
    attribute long    wall;
    attribute long    ptime;
};

[scriptable, uuid(19baf81b-d1bd-4a99-9010-dd6f478bfd22)]
interface fbIFacebookService : nsISupports
{
    readonly attribute AString apiKey;
    readonly attribute AString secret;

    // login.xul is responsible for performing the login sequence.  Once that
    // is finished, it should call sessionStart, which initiates the polling
    // process.  If the session ever ends, the polling will stop until
    // sessionStart is called again.  Aside from the facebook.auth methods,
    // all other Facebook API calls should be done inside this service.
    void sessionStart(in AString sessionKey, in AString sessionSecret, in AString uid);
    void sessionEnd();

    // Use this function to help the service figure out how frequently it
    // should poll facebook.  If we go a while without loading any pages, it
    // will back off to only 1 check per 10 minutes.  If we are loading a
    // bunch of facebook pages, be more aggressive and go every minute.
    void hintPageLoad(in boolean facebookPage);

    // All other interaction comes by windows listing themselves as observers
    // and notifications that get triggered by the polling process.
    // Notifications that we fire:
    //   Topic                              Subject                      Data
    //   facebook-session-start             your fbIFacebookUser         your id
    //       (the session has started)                                   
    //   facebook-session-end               null                         null
    //
    //   facebook-new-req                   requester's fbIFacebookUser  requester's id
    //       (you have a new friend request)
    //   facebook-reqs-updated              null                         new req count
    //       (the count of reqs has been updated)
    //   facebook-new-msgs                  null                         new msg count
    //       (you have received new messages)
    //   facebook-msgs-updated              null                         new msg count
    //       (the count of msgs has been updated)
    //   facebook-new-poke                  null                         new poke count
    //       (you have received a new poke)
    //   facebook-pokes-updated             null                         new poke count
    //       (the count of pokes has been updated)
    //   facebook-wall-updated              null                         new wall count
    //       (the count of your wall posts has been updated)
    //
    //   facebook-new-friend                friend's fbIFacebookUser     friend's id
    //       (you have a new friend)
    //   facebook-friend-updated            updater's fbIFacebookUser    field updated
    //       (something updated about a friend - status msg, wall count, or notes count)
    //   facebook-friends-updated           null                         null
    //       (the collection of friends has been modified in some way)
    //
    // Windows can also query the most recent status of these things via the
    // readonly attributes below:
    readonly attribute boolean         loggedIn;
    readonly attribute fbIFacebookUser loggedInUser;
    readonly attribute long            numMsgs;
    readonly attribute long            numPokes;
    readonly attribute long            numReqs;
    readonly attribute long            numShrs;
    readonly attribute long            numEventInvs;
    readonly attribute long            numGroupInvs;
    void getFriends(out PRUint32 count, [retval,array,size_is(count)] out fbIFacebookUser users);
};
